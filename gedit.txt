package gedit;

import static com.teamdev.jxbrowser.engine.RenderingMode.HARDWARE_ACCELERATED;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.nio.file.Files;
import java.util.Optional;

import com.teamdev.jxbrowser.browser.Browser;
import com.teamdev.jxbrowser.engine.Engine;
import com.teamdev.jxbrowser.engine.EngineOptions;
import com.teamdev.jxbrowser.view.javafx.BrowserView;

import javafx.scene.control.Button;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.Pane;

import com.teamdev.jxbrowser.frame.Frame;
import com.teamdev.jxbrowser.frame.WebStorage;
import com.teamdev.jxbrowser.navigation.event.FrameDocumentLoadFinished;
import com.teamdev.jxbrowser.navigation.event.FrameLoadFinished;
import com.teamdev.jxbrowser.navigation.event.LoadStarted;
import com.teamdev.jxbrowser.navigation.internal.rpc.LoadFinished;
import com.teamdev.jxbrowser.navigation.event.LoadStarted;

public class JxBrowserWrapper implements WebNodeView {
    final String LICENSE_KEY = "OK6AEKNYF27LOP29K9XD04Y24ZWAE3TPS1VO5OQ3N3UFBNXP5GS3MK2JGEGJFR8CRZVURRO59PAFH8P4GXKZ28B99MT5S8TLT5SINFDZFKPZ74ZQVPVB6G9WVG7HYLMVL8QZSFUVJ1GFY348T";
    Engine engine;
    Browser browser;
    BrowserView view;
    String MARKDOWN = "Empty Markdown";
    Pane pane;

    public JxBrowserWrapper(String md) {
        this.MARKDOWN = md;
        createBrowser();
    }

    public JxBrowserWrapper() {
        createBrowser();
    }

    public BrowserView getView() {
        return this.view;
    }

    private Button createButton() {
        Button btn = new Button("Save");
        btn.setOnAction(event -> {
            System.out.println("creating save btn");
        });
        return btn;
    }

    public Pane getPane() {
        BorderPane bp = new BorderPane(getView());
        bp.setBottom(createButton());

        this.pane = bp;

        return this.pane;
    }

    public void saveMarkdown() {

    }

    public void setLocalStorageItem(String key, String value) {
        this.browser.navigation().on(LoadFinished.class, event -> {
            Optional<Frame> maybeFrame = this.browser.mainFrame();
            Frame frame;

            if (maybeFrame.isPresent() == false) {
                System.out.println("frame was not available");
                return;
            }

            // System.out.println(maybeFrame.isPresent());
            frame = maybeFrame.get();
            WebStorage localStorage = frame.localStorage();
            System.out.println("frame is available - setting localstorage");
            // localStorage.putItem("markdown", "Test variable is working.");
            localStorage.putItem(key, value);
        });
    }

    public void createBrowser() {

        this.engine = Engine.newInstance(
                EngineOptions.newBuilder(HARDWARE_ACCELERATED)
                        .licenseKey(LICENSE_KEY)
                        .build());

        // create browser
        this.browser = engine.newBrowser();
        this.browser.devTools().show();

        // find html to load
        String path = resourcePathToFullPath("out/index.html");
        this.browser.navigation().loadUrl(path);

        this.setLocalStorageItem("markdown", this.MARKDOWN);
        // node to add to scene
        this.view = BrowserView.newInstance(this.browser);

    }

    private String resourcePathToFullPath(String rPath) {
        URL resourceUrl = this.getClass().getClassLoader().getResource(rPath);
        File resourceFile = new File(resourceUrl.getFile());
        System.out.println("Resource Full Path: " + resourceFile.getAbsolutePath());
        return resourceFile.exists() ? resourceFile.getAbsolutePath() : null;
    }

}

// // should inject into local storage
// public void injectMarkdown(String markdown) {
// this.browser.navigation().on(LoadStarted.class, event -> {
// Optional<Frame> maybeFrame = this.browser.mainFrame();
// Frame frame;
// if (maybeFrame.isPresent()) {
// frame = maybeFrame.get();
// System.out.println("frame is available - injecting markdown");
// frame.executeJavaScript("document.querySelector(\"#injected\").innerHTML = '"
// + markdown + "'");
// } else {
// frame = maybeFrame.get();
// System.out.println("frame was not available");
// System.out.println(frame);
// }
// });
// }

// public void getLocalStorageItem(String key) {
// this.browser.navigation().on(NavigationFinished.class, event -> {
// Optional<Frame> maybeFrame = this.browser.mainFrame();
// Frame frame;
// if (!maybeFrame.isPresent()) {
// System.out.println("frame was not available");
// return;
// }

// frame = maybeFrame.get();
// WebStorage localStorage = frame.localStorage();
// System.out.println("frame is available - setting localstorage");
// Optional<String> extractedMarkdown = localStorage.item(key);
// if (extractedMarkdown.isPresent())
// // String x = localStorage.item(key);
// });
// }
